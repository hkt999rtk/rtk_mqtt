/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/rtk/mqtt-framework/cmd/rtk-dll-simple */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

#include <stdlib.h>
#include <stdint.h>
#include <string.h>

// RTK MQTT Framework DLL Error Codes
#define RTK_SUCCESS             0
#define RTK_ERROR_INVALID_PARAM -1
#define RTK_ERROR_MEMORY        -2
#define RTK_ERROR_NOT_FOUND     -3
#define RTK_ERROR_CONNECTION    -4

// Simple Device Info Structure
typedef struct {
    char id[64];
    char device_type[32];
    char name[128];
    char version[16];
} rtk_device_info_t;

// Simple Device State Structure
typedef struct {
    char status[32];
    char health[32];
    int64_t uptime;
    int64_t last_seen;
} rtk_device_state_t;

// Simple MQTT Configuration
typedef struct {
    char broker_host[256];
    int broker_port;
    char client_id[64];
} rtk_mqtt_config_t;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoUintptr rtk_create_client();
extern int rtk_destroy_client(GoUintptr clientID);
extern int rtk_configure_mqtt(GoUintptr clientID, rtk_mqtt_config_t* config);
extern int rtk_set_device_info(GoUintptr clientID, rtk_device_info_t* info);
extern int rtk_connect(GoUintptr clientID);
extern int rtk_disconnect(GoUintptr clientID);
extern int rtk_publish_state(GoUintptr clientID, rtk_device_state_t* state);
extern char* rtk_get_version();
extern char* rtk_get_last_error();
extern int rtk_is_connected(GoUintptr clientID);
extern int rtk_get_client_count();

#ifdef __cplusplus
}
#endif
