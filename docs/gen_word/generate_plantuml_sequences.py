#!/usr/bin/env python3
"""
Generate sequence diagrams using PlantUML for better quality
"""

import subprocess
from pathlib import Path
import os

def create_generic_sequence_puml():
    """Create generic MQTT sequence diagram in PlantUML format"""
    puml_content = '''
@startuml generic_sequence
!theme plain
title MQTT Diagnostic Communication Sequence

participant "Device" as D
participant "MQTT Broker" as B  
participant "Controller" as C

note over D: Ëß∏ÁôºÊ¢ù‰ª∂ÁôºÁîü

D -> B: evt/wifi.xxx
activate D
B -> C: 
note right: 1. ‰∫ã‰ª∂Ëß∏Áôº

C -> B: cmd/req
B -> D: diagnosis.get
note left: 2. Ë®∫Êñ∑Ë´ãÊ±Ç

D -> B: cmd/ack
B -> C: 
note right: 3. ÂëΩ‰ª§Á¢∫Ë™ç

note over D: [Ë®∫Êñ∑Ë≥áÊñôÊî∂ÈõÜ‰∏≠]\n3-15 Áßí
D -> D: Ë≥áÊñôÊî∂ÈõÜËôïÁêÜ

D -> B: cmd/res
B -> C: 
note right: 4. Ë®∫Êñ∑ÁµêÊûú\n(JSON 5-10KB)

D -> B: state (updated)
B -> C: 
note right: 5. ÁãÄÊÖãÊõ¥Êñ∞

alt ÈúÄË¶Å‰øÆÂæ©Âãï‰Ωú
    C -> B: cmd/req (action)
    B -> D: 
    note left: 6. ‰øÆÂæ©Âãï‰Ωú (ÈÅ∏Áî®)
    
    D -> B: cmd/ack
    B -> C: 
    
    D -> B: cmd/res
    B -> C: 
end

deactivate D

@enduml
'''
    return puml_content

def create_roaming_sequence_puml():
    """Create WiFi roaming diagnosis sequence in PlantUML format"""
    puml_content = '''
@startuml roaming_sequence
!theme plain
title WiFi Roaming Diagnosis Sequence
subtitle Device: office-ap-001

participant "Device\\n(office-ap-001)" as D
participant "MQTT Broker" as B
participant "Controller" as C

note over D: [RSSI < -70dB for 10s]\\nÊº´ÈÅäÊú™Ëß∏Áôº

D -> B: evt/wifi.roam_miss (QoS 1)
activate D
B -> C: 
note right: Event: Êº´ÈÅäÊú™Ëß∏Áôº

C -> B: cmd/req diagnosis.get\\ntype: wifi.roaming (QoS 1) 
B -> D: 
note left: Request: Ë©≥Á¥∞Ë®∫Êñ∑

D -> B: cmd/ack (< 1s)
B -> C: 
note right: Ack: Êé•Êî∂ÂëΩ‰ª§

note over D: [Êî∂ÈõÜË®∫Êñ∑Ë≥áÊñô: 3-15s]\\n‚Ä¢ ÊéÉÊèèÊ≠∑Âè≤\\n‚Ä¢ RF Áµ±Ë®à\\n‚Ä¢ ÂÄôÈÅ∏ AP ÂàÜÊûê
D -> D: Ë®∫Êñ∑Ë≥áÊñôÊî∂ÈõÜ

D -> B: cmd/res (JSON 5-10KB)
B -> C: 
note right: Result: Ë®∫Êñ∑Ë≥áÊñô\\n‚Ä¢ Ê†πÂõ†ÂàÜÊûê\\n‚Ä¢ Âª∫Ë≠∞Âãï‰Ωú

C -> B: cmd/req wifi.scan
B -> D: 
note left: Action: Áí∞Â¢ÉÊéÉÊèè

D -> B: cmd/ack
B -> C: 
note right: Ack: Âü∑Ë°åÊéÉÊèè

note over D: [Âü∑Ë°åÊéÉÊèè: 2-5s]
D -> D: Áí∞Â¢ÉÊéÉÊèè

D -> B: cmd/res
B -> C: 
note right: Result: ÊéÉÊèèÂÆåÊàê

D -> B: state (updated)\\nhealth: warn‚Üíok
B -> C: 
note right: State: ÂÅ•Â∫∑ÁãÄÊÖãÊõ¥Êñ∞

deactivate D

@enduml
'''
    return puml_content

def create_connection_failure_sequence_puml():
    """Create connection failure sequence in PlantUML format"""
    puml_content = '''
@startuml connection_failure_sequence
!theme plain
title WiFi Connection Failure Diagnosis Sequence
subtitle Device: laptop-005

participant "Device\\n(laptop-005)" as D
participant "MQTT Broker" as B
participant "Controller" as C

note over D: [ÈÄ£Á∑öÂòóË©¶ÈñãÂßã]

note over D: [WPA3 SAE Ë™çË≠âÂ§±Êïó]

D -> B: evt/wifi.connect_fail\\nseverity: error\\nstage: authentication
activate D
B -> C: 
note right: Event: ÈÄ£Á∑öÂ§±Êïó

C -> B: cmd/req diagnosis.get\\ninclude_auth_details\\n(timeout: 20s)
B -> D: 
note left: Request: ÈÄ£Á∑öË®∫Êñ∑

D -> B: cmd/ack
B -> C: 
note right: Ack: ÈñãÂßãÂàÜÊûê

note over D: [ÂàÜÊûêÈÄ£Á∑öÈÅéÁ®ã]\\n‚Ä¢ SAE ‰∫§ÊèõË®òÈåÑ\\n‚Ä¢ RF Áí∞Â¢ÉÂàÜÊûê\\n‚Ä¢ AP ËÉΩÂäõÊ™¢Ê∏¨
D -> D: ÈÄ£Á∑öÂ§±ÊïóÂàÜÊûê

D -> B: cmd/res\\n(Ë©≥Á¥∞Ë™çË≠âÊó•Ë™å)
B -> C: 
note right: Result: Â§±ÊïóÂàÜÊûê\\n‚Ä¢ SAE Ë∂ÖÊôÇ\\n‚Ä¢ ÂÇôÁî® AP Âª∫Ë≠∞

C -> B: cmd/req wifi.connect\\ntarget: ÂÇôÁî®AP
B -> D: 
note left: Action: ÈÄ£Á∑öÈáçË©¶

D -> B: cmd/ack
B -> C: 
note right: Ack: ÈáçË©¶‰∏≠

note over D: [ÈÄ£Á∑öÊàêÂäü]

D -> B: cmd/res
B -> C: 
note right: Result: ÈÄ£Á∑öÊàêÂäü

D -> B: state (updated)\\nhealth: error‚Üíok
B -> C: 
note right: State: connected

deactivate D

@enduml
'''
    return puml_content

def create_arp_loss_sequence_puml():
    """Create ARP loss sequence in PlantUML format"""
    puml_content = '''
@startuml arp_loss_sequence
!theme plain
title ARP Loss Diagnosis Sequence
subtitle Device: smart-camera-003

participant "Device\\n(smart-camera-003)" as D
participant "MQTT Broker" as B
participant "Controller" as C

note over D: [ARP Ë´ãÊ±ÇÁôºÈÄÅ]

note over D: [ÈÄ£Á∫å 2 Ê¨°ÁÑ°ÂõûÊáâ]

D -> B: evt/wifi.arp_loss\\nconsecutive: 2\\ngateway ÁÑ°ÂõûÊáâ
activate D
B -> C: 
note right: Event: ARP ÈÅ∫Â§±

C -> B: cmd/req diagnosis.get\\ninclude_rf_stats\\ninclude_interference\\n(timeout: 25s)
B -> D: 
note left: Request: Á∂≤Ë∑ØË®∫Êñ∑

D -> B: cmd/ack\\n‰º∞Ë®àÂÆåÊàê: 20s
B -> C: 
note right: Ack: ÂàÜÊûê‰∏≠

note over D: [Á∂≤Ë∑ØÁí∞Â¢ÉÂàÜÊûê]\\n‚Ä¢ RF Âπ≤ÊìæÊéÉÊèè\\n‚Ä¢ ÊµÅÈáèÂàÜÊûê\\n‚Ä¢ Âü∫Â∏∂Áµ±Ë®à
D -> D: Á∂≤Ë∑ØË®∫Êñ∑ÂàÜÊûê

D -> B: cmd/res\\nroot_cause: channel_interference
B -> C: 
note right: Result: Á∂≤Ë∑ØÂàÜÊûê\\n‚Ä¢ È†ªÈÅìÂπ≤Êìæ\\n‚Ä¢ AP Ë≤†ËºâÊ≥¢Âãï

C -> B: cmd/req network.arp.config\\nÂ¢ûÂä†Ë∂ÖÊôÇÊôÇÈñì
B -> D: 
note left: Action: ÂèÉÊï∏Ë™øÊï¥

D -> B: cmd/ack
B -> C: 
note right: Ack: ÈÖçÁΩÆÊõ¥Êñ∞

D -> B: cmd/res
B -> C: 
note right: Result: ÈÖçÁΩÆÂÆåÊàê

D -> B: telemetry/connectivity\\n(ÊØè 10 Áßí)\\nARP ÊàêÂäüÁéáÊîπÂñÑ
B -> C: 
note right: Telemetry: ÊåÅÁ∫åÁõ£Êéß

D -> B: state (updated)\\nhealth: warn‚Üíok
B -> C: 
note right: State: Á∂≤Ë∑ØÁ©©ÂÆö

deactivate D

@enduml
'''
    return puml_content

def generate_puml_files():
    """Generate all .puml files"""
    output_dir = Path(__file__).parent.parent
    
    puml_files = [
        ('generic_sequence.puml', create_generic_sequence_puml()),
        ('roaming_sequence.puml', create_roaming_sequence_puml()),
        ('connection_failure_sequence.puml', create_connection_failure_sequence_puml()),
        ('arp_loss_sequence.puml', create_arp_loss_sequence_puml())
    ]
    
    generated_files = []
    for filename, content in puml_files:
        filepath = output_dir / filename
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        generated_files.append(filepath)
        print(f"‚úÖ Generated: {filepath}")
    
    return generated_files

def convert_puml_to_png(puml_files):
    """Convert .puml files to PNG using PlantUML"""
    png_files = []
    
    # Look for PlantUML jar in the current directory first
    script_dir = Path(__file__).parent
    plantuml_jar = script_dir / "plantuml.jar"
    
    if plantuml_jar.exists():
        print(f"üì¶ Found PlantUML at: {plantuml_jar}")
        
        for puml_file in puml_files:
            png_file = puml_file.with_suffix('.png')
            
            try:
                # Use java -jar plantuml.jar
                result = subprocess.run([
                    'java', '-jar', str(plantuml_jar), '-tpng', str(puml_file)
                ], capture_output=True, text=True, check=True, cwd=puml_file.parent)
                
                png_files.append(png_file)
                print(f"‚úÖ Converted: {png_file}")
                
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Failed to convert {puml_file}: {e}")
                print(f"   Error output: {e.stderr}")
            except FileNotFoundError:
                print(f"‚ùå Java not found. Please install Java to run PlantUML.")
                print(f"   Install Java with: brew install openjdk")
                break
    else:
        print(f"‚ùå PlantUML jar not found at: {plantuml_jar}")
        print(f"   Please download plantuml.jar from https://plantuml.com/download")
        print(f"   and place it in: {script_dir}")
    
    return png_files

def main():
    """Main function to generate PlantUML sequence diagrams"""
    try:
        print("üöÄ Generating PlantUML sequence diagram files...")
        puml_files = generate_puml_files()
        
        print("\nüé® Converting PlantUML files to PNG...")
        png_files = convert_puml_to_png(puml_files)
        
        if png_files:
            print(f"\nüéâ Successfully generated {len(png_files)} PlantUML sequence diagrams!")
            for png_file in png_files:
                print(f"üìÅ {png_file}")
        else:
            print("\n‚ö†Ô∏è  No PNG files were generated. Check if PlantUML is installed.")
            print("   Install with: brew install plantuml")
            print("   Or download from: https://plantuml.com/download")
            
    except Exception as e:
        print(f"üí• Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()